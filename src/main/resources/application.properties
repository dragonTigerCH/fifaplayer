# 서버
server.port=8017
# Encoding UTF-8
spring.http.encoding.charset=UTF-8
spring.http.encoding.enabled=true
spring.http.encoding.force=true
# H2 설정 정보
# spring.datasource.url=jdbc:h2:tcp://localhost/~/newDB
# spring.datasource.driver-class-name=org.h2.Driver
# spring.datasource.username=sa
# MySQL 설정
spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver
spring.datasource.url=jdbc:mysql://localhost:3306/fifa_player_db?serverTimezone=Asia/Seoul&characterEncoding=UTF-8
spring.datasource.username=root
spring.datasource.password=1234
spring.jpa.database=mysql
# sql보기
spring.jpa.show-sql=true
spring.jpa.hibernate.ddl.auto=none
#sql 추가적인 주석 표기
spring.jpa.properties.hibernate.use_sql_comments=true
#?에 어떤값이 들어갔는지 확인
logging.level.org.hibernate.type.descriptor.sql=trace
# 기본 변수이름을 그대로 이용한다.
spring.jpa.hibernate.naming.physical-strategy = org.hibernate.boot.model.naming.PhysicalNamingStrategyStandardImpl
# jpa setting
# sql문 보여주기
spring.jpa.properties.hibernate.show_sql=true
# sql문 이쁘게 보여주기
spring.jpa.properties.hibernate.format_sql=true
# 데이터베이스 스키마 자동생성
spring.jpa.hibernate.ddl-auto=create 
# smtp 메일보내기 설정 (구글)
spring.mail.host=smtp.gmail.com
spring.mail.port=587
spring.mail.username=yoho9908@gmail.com
spring.mail.password=pdeplfytfrkibmoq
spring.mail.properties.mail.smtp.starttls.enable=true
spring.mail.properties.mail.smtp.auth=true
# errors
spring.messages.basename=errors
# seasonFile.dir
seasonFile.dir=C:\\fifaPrj\\fifaplayer\\src\\main\\resources\\static\\img\\season\\
# datanFile.dir
datanFile.dir=C:\\fifaPrj\\fifaplayer\\src\\main\\resources\\static\\img\\datan\\

# GOOGLE oauth2
spring.security.oauth2.client.registration.google.client-id = 909841872817-n5e1ul5q4ta2ub6bh8ao4a70gqd53ojk.apps.googleusercontent.com
spring.security.oauth2.client.registration.google.client-secret = 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
spring.security.oauth2.client.registration.google.scope = profile, email

# facebook oauth2
spring.security.oauth2.client.registration.facebook.client-id = 327303186114262
spring.security.oauth2.client.registration.facebook.client-secret = ce93b0f592f1c71db10a42eed2599e0f
spring.security.oauth2.client.registration.facebook.scope = public_profile, email

# naver oauth2
spring.security.oauth2.client.registration.naver.client-id = VrZiGBN9Fhes5mhMZCAr
spring.security.oauth2.client.registration.naver.client-secret = u1jwkdRuLZ
spring.security.oauth2.client.registration.naver.scope = name , email , profile_image ,nickname
spring.security.oauth2.client.registration.naver.client-name = Naver
spring.security.oauth2.client.registration.naver.authorization-grant-type = authorization_code
# 네이버는 아래 주소를 적어주어야한다 구글이나 페이스북은 고정이기때문에 적어도 되고 안적어도된다.
spring.security.oauth2.client.registration.naver.redirect-uri:http://localhost:8017/login/oauth2/code/naver
# naver provider
spring.security.oauth2.client.provider.naver.authorization-uri=https://nid.naver.com/oauth2.0/authorize
spring.security.oauth2.client.provider.naver.token-uri=https://nid.naver.com/oauth2.0/token
spring.security.oauth2.client.provider.naver.user-info-uri=https://openapi.naver.com/v1/nid/me
# 회원정보를 json으로 받는데 response라는 키값으로 네이버가 리턴해줌
spring.security.oauth2.client.provider.naver.user-name-attribute=response

##SSL 설정
#server.ssl.key-store-type=PKCS12
#server.ssl.key-store=ssl/yong-store.c
#server.ssl.key-alias=yong-store
#server.ssl.key-store-password=123456







